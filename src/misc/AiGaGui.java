/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package misc;

import ga.ChromosomeEvaluator;
import ga.GeneticAlgorithm;
import ga.GaSettings;
import ga.OperatorOptions;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Paths;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dee
 */
public class AiGaGui extends javax.swing.JFrame {

    /**
     * Creates new form AI_GG
     */
    public AiGaGui() {
        initComponents();
        ControllerGG c = new ControllerGG();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chromosomeType = new javax.swing.ButtonGroup();
        parentSelection = new javax.swing.ButtonGroup();
        survivorSelection = new javax.swing.ButtonGroup();
        ct_pnl = new javax.swing.JPanel();
        integer = new javax.swing.JRadioButton();
        real = new javax.swing.JRadioButton();
        binary = new javax.swing.JRadioButton();
        permutation = new javax.swing.JRadioButton();
        ps_pnl = new javax.swing.JPanel();
        ps_rb_sigmaScaling = new javax.swing.JRadioButton();
        ps_rb_linearScaling = new javax.swing.JRadioButton();
        ps_rb_rouletteWheel = new javax.swing.JRadioButton();
        ps_rb_linearRanking = new javax.swing.JRadioButton();
        ps_rb_nonLinear = new javax.swing.JRadioButton();
        ps_rb_tournament = new javax.swing.JRadioButton();
        ev_pnl = new javax.swing.JPanel();
        crossoverType = new javax.swing.JComboBox();
        lb_crossOver = new javax.swing.JLabel();
        lb_mutation = new javax.swing.JLabel();
        mutationType = new javax.swing.JComboBox();
        st_pnl = new javax.swing.JPanel();
        lb_popSize = new javax.swing.JLabel();
        popSize = new javax.swing.JTextField();
        lb_maxGen = new javax.swing.JLabel();
        maxGen = new javax.swing.JTextField();
        st_tf_crossPb = new javax.swing.JTextField();
        lb_crossPb = new javax.swing.JLabel();
        lb_mutPb = new javax.swing.JLabel();
        st_tf_mutPb = new javax.swing.JTextField();
        lb_maxFit = new javax.swing.JLabel();
        st_tf_maxFit = new javax.swing.JTextField();
        prop_pnl = new javax.swing.JPanel();
        lb_numGen = new javax.swing.JLabel();
        numGen = new javax.swing.JTextField();
        lb_minVal = new javax.swing.JLabel();
        minVal = new javax.swing.JTextField();
        maxVal = new javax.swing.JTextField();
        pr_tf_maxVal = new javax.swing.JLabel();
        sv_pnl = new javax.swing.JPanel();
        sv_rb_generational = new javax.swing.JRadioButton();
        sv_rb_steadyState = new javax.swing.JRadioButton();
        fit_pnl = new javax.swing.JPanel();
        tfEvaluator = new javax.swing.JTextField();
        fit_bt_open = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        bt_saveSetting = new javax.swing.JButton();
        bt_saveResult = new javax.swing.JButton();
        lib_pnl = new javax.swing.JPanel();
        tfLib = new javax.swing.JTextField();
        lib_bt_open = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ct_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chromosome Type"));
        ct_pnl.setToolTipText("");

        chromosomeType.add(integer);
        integer.setText("Integer");

        chromosomeType.add(real);
        real.setText("Real");

        chromosomeType.add(binary);
        binary.setMnemonic('0');
        binary.setSelected(true);
        binary.setText("Binary");

        chromosomeType.add(permutation);
        permutation.setText("Permutation");

        javax.swing.GroupLayout ct_pnlLayout = new javax.swing.GroupLayout(ct_pnl);
        ct_pnl.setLayout(ct_pnlLayout);
        ct_pnlLayout.setHorizontalGroup(
            ct_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ct_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ct_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(permutation)
                    .addComponent(binary)
                    .addComponent(real)
                    .addComponent(integer))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        ct_pnlLayout.setVerticalGroup(
            ct_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ct_pnlLayout.createSequentialGroup()
                .addComponent(binary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(integer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(real)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(permutation)
                .addGap(2, 2, 2))
        );

        ps_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Parent Selection"));
        ps_pnl.setToolTipText("");

        parentSelection.add(ps_rb_sigmaScaling);
        ps_rb_sigmaScaling.setText("Sigma Scaling");

        parentSelection.add(ps_rb_linearScaling);
        ps_rb_linearScaling.setText("Linear Scaling");

        parentSelection.add(ps_rb_rouletteWheel);
        ps_rb_rouletteWheel.setSelected(true);
        ps_rb_rouletteWheel.setText("Roulette Wheel");

        parentSelection.add(ps_rb_linearRanking);
        ps_rb_linearRanking.setText("Linear Ranking");

        parentSelection.add(ps_rb_nonLinear);
        ps_rb_nonLinear.setText("Non-linear Ranking");

        parentSelection.add(ps_rb_tournament);
        ps_rb_tournament.setText("Tournament Selection");

        javax.swing.GroupLayout ps_pnlLayout = new javax.swing.GroupLayout(ps_pnl);
        ps_pnl.setLayout(ps_pnlLayout);
        ps_pnlLayout.setHorizontalGroup(
            ps_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ps_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ps_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ps_rb_rouletteWheel)
                    .addComponent(ps_rb_linearScaling)
                    .addComponent(ps_rb_sigmaScaling))
                .addGap(18, 18, 18)
                .addGroup(ps_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ps_rb_linearRanking)
                    .addComponent(ps_rb_nonLinear)
                    .addComponent(ps_rb_tournament))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ps_pnlLayout.setVerticalGroup(
            ps_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ps_pnlLayout.createSequentialGroup()
                .addGroup(ps_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ps_pnlLayout.createSequentialGroup()
                        .addComponent(ps_rb_linearRanking)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ps_rb_nonLinear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ps_rb_tournament))
                    .addGroup(ps_pnlLayout.createSequentialGroup()
                        .addComponent(ps_rb_rouletteWheel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ps_rb_linearScaling)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ps_rb_sigmaScaling)))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        ev_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Evolutionary Operation"));

        crossoverType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "single point" }));

        lb_crossOver.setText("Cross Over");

        lb_mutation.setText("Mutation");

        mutationType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "binary" }));

        javax.swing.GroupLayout ev_pnlLayout = new javax.swing.GroupLayout(ev_pnl);
        ev_pnl.setLayout(ev_pnlLayout);
        ev_pnlLayout.setHorizontalGroup(
            ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ev_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_crossOver)
                    .addComponent(lb_mutation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mutationType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(crossoverType, 0, 141, Short.MAX_VALUE))
                .addContainerGap())
        );
        ev_pnlLayout.setVerticalGroup(
            ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ev_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crossoverType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_crossOver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ev_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_mutation)
                    .addComponent(mutationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        st_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Evolutionary Settings"));
        st_pnl.setToolTipText("");

        lb_popSize.setText("Population Size");

        popSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        popSize.setText("100");

        lb_maxGen.setText("Max Generation");

        maxGen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxGen.setText("100");

        st_tf_crossPb.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        st_tf_crossPb.setText("0.8");

        lb_crossPb.setText("Crossover prob.");

        lb_mutPb.setText("Mutation prob.");

        st_tf_mutPb.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        st_tf_mutPb.setText("0.01");

        lb_maxFit.setText("Max Fitness");

        st_tf_maxFit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        st_tf_maxFit.setText("1000");

        javax.swing.GroupLayout st_pnlLayout = new javax.swing.GroupLayout(st_pnl);
        st_pnl.setLayout(st_pnlLayout);
        st_pnlLayout.setHorizontalGroup(
            st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(st_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_popSize)
                    .addComponent(lb_maxGen)
                    .addComponent(lb_crossPb)
                    .addComponent(lb_mutPb)
                    .addComponent(lb_maxFit))
                .addGap(18, 18, 18)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxGen)
                    .addComponent(popSize, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(st_tf_mutPb)
                    .addComponent(st_tf_crossPb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(st_tf_maxFit))
                .addContainerGap())
        );
        st_pnlLayout.setVerticalGroup(
            st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(st_pnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_popSize)
                    .addComponent(popSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_maxGen)
                    .addComponent(maxGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(st_tf_crossPb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_crossPb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(st_tf_mutPb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_mutPb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(st_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(st_tf_maxFit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_maxFit))
                .addGap(97, 97, 97))
        );

        prop_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chromosome Properties"));

        lb_numGen.setText("num Gen");

        numGen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numGen.setText("0");

        lb_minVal.setText("min Value");

        minVal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minVal.setText("0");

        maxVal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxVal.setText("0");

        pr_tf_maxVal.setText("max Value");

        javax.swing.GroupLayout prop_pnlLayout = new javax.swing.GroupLayout(prop_pnl);
        prop_pnl.setLayout(prop_pnlLayout);
        prop_pnlLayout.setHorizontalGroup(
            prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prop_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(prop_pnlLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(lb_numGen)
                            .addGap(18, 18, 18))
                        .addGroup(prop_pnlLayout.createSequentialGroup()
                            .addComponent(lb_minVal)
                            .addGap(12, 12, 12)))
                    .addGroup(prop_pnlLayout.createSequentialGroup()
                        .addComponent(pr_tf_maxVal)
                        .addGap(9, 9, 9)))
                .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxVal, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(minVal, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(numGen))
                .addContainerGap())
        );
        prop_pnlLayout.setVerticalGroup(
            prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prop_pnlLayout.createSequentialGroup()
                .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_numGen)
                    .addComponent(numGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_minVal)
                    .addComponent(minVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(prop_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pr_tf_maxVal)
                    .addComponent(maxVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        sv_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Survivor Selection"));
        sv_pnl.setToolTipText("");

        survivorSelection.add(sv_rb_generational);
        sv_rb_generational.setSelected(true);
        sv_rb_generational.setText("Generational");

        survivorSelection.add(sv_rb_steadyState);
        sv_rb_steadyState.setText("Steady State");

        javax.swing.GroupLayout sv_pnlLayout = new javax.swing.GroupLayout(sv_pnl);
        sv_pnl.setLayout(sv_pnlLayout);
        sv_pnlLayout.setHorizontalGroup(
            sv_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sv_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sv_rb_generational)
                .addGap(37, 37, 37)
                .addComponent(sv_rb_steadyState)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sv_pnlLayout.setVerticalGroup(
            sv_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sv_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(sv_rb_generational)
                .addComponent(sv_rb_steadyState))
        );

        fit_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Fitness Evaluator"));

        fit_bt_open.setText("Open");

        javax.swing.GroupLayout fit_pnlLayout = new javax.swing.GroupLayout(fit_pnl);
        fit_pnl.setLayout(fit_pnlLayout);
        fit_pnlLayout.setHorizontalGroup(
            fit_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fit_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfEvaluator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fit_bt_open)
                .addContainerGap())
        );
        fit_pnlLayout.setVerticalGroup(
            fit_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fit_pnlLayout.createSequentialGroup()
                .addGroup(fit_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfEvaluator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fit_bt_open))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRun.setText("Run Genetic Algorithm");

        bt_saveSetting.setText("Save Settings");

        bt_saveResult.setText("Save Result");

        lib_pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "AILibrary"));

        lib_bt_open.setText("Open");

        javax.swing.GroupLayout lib_pnlLayout = new javax.swing.GroupLayout(lib_pnl);
        lib_pnl.setLayout(lib_pnlLayout);
        lib_pnlLayout.setHorizontalGroup(
            lib_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lib_pnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfLib)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lib_bt_open)
                .addContainerGap())
        );
        lib_pnlLayout.setVerticalGroup(
            lib_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lib_pnlLayout.createSequentialGroup()
                .addGroup(lib_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfLib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lib_bt_open))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ct_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(prop_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ps_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sv_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ev_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(st_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lib_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fit_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bt_saveSetting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_saveResult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRun)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ct_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prop_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ps_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sv_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ev_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(st_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fit_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lib_pnl, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(bt_saveSetting)
                    .addComponent(bt_saveResult))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton binary;
    private javax.swing.JButton bt_saveResult;
    private javax.swing.JButton bt_saveSetting;
    private javax.swing.JButton btnRun;
    private javax.swing.ButtonGroup chromosomeType;
    private javax.swing.JComboBox crossoverType;
    private javax.swing.JPanel ct_pnl;
    private javax.swing.JPanel ev_pnl;
    private javax.swing.JButton fit_bt_open;
    private javax.swing.JPanel fit_pnl;
    private javax.swing.JRadioButton integer;
    private javax.swing.JLabel lb_crossOver;
    private javax.swing.JLabel lb_crossPb;
    private javax.swing.JLabel lb_maxFit;
    private javax.swing.JLabel lb_maxGen;
    private javax.swing.JLabel lb_minVal;
    private javax.swing.JLabel lb_mutPb;
    private javax.swing.JLabel lb_mutation;
    private javax.swing.JLabel lb_numGen;
    private javax.swing.JLabel lb_popSize;
    private javax.swing.JButton lib_bt_open;
    private javax.swing.JPanel lib_pnl;
    private javax.swing.JTextField maxGen;
    private javax.swing.JTextField maxVal;
    private javax.swing.JTextField minVal;
    private javax.swing.JComboBox mutationType;
    private javax.swing.JTextField numGen;
    private javax.swing.ButtonGroup parentSelection;
    private javax.swing.JRadioButton permutation;
    private javax.swing.JTextField popSize;
    private javax.swing.JLabel pr_tf_maxVal;
    private javax.swing.JPanel prop_pnl;
    private javax.swing.JPanel ps_pnl;
    private javax.swing.JRadioButton ps_rb_linearRanking;
    private javax.swing.JRadioButton ps_rb_linearScaling;
    private javax.swing.JRadioButton ps_rb_nonLinear;
    private javax.swing.JRadioButton ps_rb_rouletteWheel;
    private javax.swing.JRadioButton ps_rb_sigmaScaling;
    private javax.swing.JRadioButton ps_rb_tournament;
    private javax.swing.JRadioButton real;
    private javax.swing.JPanel st_pnl;
    private javax.swing.JTextField st_tf_crossPb;
    private javax.swing.JTextField st_tf_maxFit;
    private javax.swing.JTextField st_tf_mutPb;
    private javax.swing.ButtonGroup survivorSelection;
    private javax.swing.JPanel sv_pnl;
    private javax.swing.JRadioButton sv_rb_generational;
    private javax.swing.JRadioButton sv_rb_steadyState;
    private javax.swing.JTextField tfEvaluator;
    private javax.swing.JTextField tfLib;
    // End of variables declaration//GEN-END:variables

    public void addListener(ActionListener e) {
        binary.addActionListener(e);
        integer.addActionListener(e);
        permutation.addActionListener(e);
        real.addActionListener(e);
        btnRun.addActionListener(e);
        bt_saveResult.addActionListener(e);
        bt_saveSetting.addActionListener(e);
        fit_bt_open.addActionListener(e);
        lib_bt_open.addActionListener(e);
    }

    public String getSelected(ButtonGroup group) {
        for (Enumeration<AbstractButton> buttons
                = group.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    public String getFitnessEvaluator() {
        return tfEvaluator.getText();
    }

    public int getChromosomeType() {
        String s = getSelected(chromosomeType);
        switch (s) {
            case "Binary":
                return 0;
            case "Integer":
                return 1;
            case "Real":
                return 2;
            case "Permutation":
                return 3;
            default:
                return 0;
        }
    }

    public int getParentSelectionType() {
        String s = getSelected(parentSelection);
        switch (s) {
            case "Roulette Wheel":
                return 0;
            case "Linear Scaling":
                return 1;
            case "Sigma Scaling":
                return 2;
            case "Linear Ranking":
                return 3;
            case "Non-linear Ranking":
                return 4;
            case "Tournament Selection":
                return 5;
            default:
                return 0;
        }
    }

    public int getSurvivorSelectionType() {
        String s = getSelected(survivorSelection);
        switch (s) {
            case "Generational":
                return 0;
            case "Steady State":
                return 1;
            default:
                return 0;
        }
    }

    public int getCrossOverType() {
        String selected = (String) crossoverType.getSelectedItem();
        switch (selected) {
            case "Single Point":
                return 0;
            case "n Point":
                return 1;
            case "Uniform":
                return 2;
            case "Single Arithmetic":
                return 3;
            case "Simple ArithMetic":
                return 4;
            case " Whole ArithMetic":
                return 5;
            case "Order":
                return 6;
            case "Partially Mapped":
                return 7;
            case "Cycle":
                return 8;
            case "Edge":
                return 9;
            default:
                throw new AssertionError();
        }
    }

    public int getMutationType() {
//        return mutationType.getSelectedIndex();
        String selected = (String) mutationType.getSelectedItem();
        switch (selected) {
            case "Binary":
                return 0;
            case "Turn Over":
                return 1;
            case "Random":
                return 2;
            case "Creep":
                return 3;
            case "Uniform":
                return 4;
            case "Gaussian":
                return 5;
            case "Swap":
                return 6;
            case "Insert":
                return 7;
            case "Scramble":
                return 8;
            case "Inversion":
                return 9;
            case "nScramble":
                return 10;
            default:
                throw new AssertionError();
        }
    }

    public int getNumGen() {
        return Integer.parseInt(numGen.getText());
    }

    public int getMinValue() {
        return Integer.parseInt(minVal.getText());
    }

    public int getMaxValue() {
        return Integer.parseInt(maxVal.getText());
    }

    public int getPopSize() {
        return Integer.parseInt(popSize.getText());
    }

    public int getMaxGeneration() {
        return Integer.parseInt(maxGen.getText());
    }

    public double getCrossoverPb() {
        return Double.parseDouble(st_tf_crossPb.getText());
    }

    public double getMutationPb() {
        return Double.parseDouble(st_tf_mutPb.getText());
    }

    public double getMaxFitness() {
        return Double.parseDouble(st_tf_maxFit.getText());
    }

    public void viewErrorMsg(String errorMsg) {
        JOptionPane.showMessageDialog(this, errorMsg);
    }

    private class ControllerGG implements ActionListener {

        private GeneticAlgorithm model;
        private String evaluatorPath;
        private String evaluatorClass;
        private String libPath;
        private String mainPath = Paths.get(".").toAbsolutePath().normalize().toString();

        public ControllerGG() {
            addListener(this);
            binarySelected();
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            Object source = ae.getSource();
            try {
                if (source.equals(lib_bt_open)) {
                    JFileChooser fc = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("AiLibrary File", "jar", "jar");
                    fc.setFileFilter(filter);
                    int returnVal = fc.showOpenDialog(fit_pnl);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        libPath = fc.getSelectedFile().getAbsolutePath();
                        tfLib.setText(libPath);
                    } else {
                        tfLib.setText("");
                    }
                } else if (source.equals(fit_bt_open)) {
                    if (tfLib.getText().isEmpty()) {
                        throw new IllegalStateException("Please Choose Library first");
                    }
                    JFileChooser fc = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("Java File", "java", "java");
                    fc.setFileFilter(filter);
                    int returnVal = fc.showOpenDialog(fit_pnl);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        evaluatorPath = fc.getSelectedFile().getAbsolutePath();
                        evaluatorClass = fc.getSelectedFile().getName();
                        evaluatorClass = evaluatorClass.substring(0, evaluatorClass.length() - 5);
                        compileEvaluator();
                        tfEvaluator.setText(evaluatorPath);
                    } else {
                        tfEvaluator.setText("");
                    }
                } else if (source.equals(binary) || source.equals(integer)) {
                    binarySelected();
                } else if (source.equals(real)) {
                    realSelected();
                } else if (source.equals(permutation)) {
                    permutationSelected();
                } else if (source.equals(btnRun)) {
                    process();
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(AiGaGui.this, e.getMessage());
            }
        }

        private void process() throws Exception {

            if (tfLib.getText().isEmpty() || tfEvaluator.getText().isEmpty()) {
                throw new IllegalStateException("Please Choose Library and Evaluator first");
            }
            GaSettings setting = new GaSettings(
                    getNumGen(), getPopSize(), getMaxGeneration(),
                    getMinValue(), getMaxValue(), getCrossoverPb(),
                    getMutationPb(), getMaxFitness());
            System.out.println("1");
            OperatorOptions operations = null;
            try {
                operations = new OperatorOptions(
                        getChromosomeType(),
                        getCrossOverType(),
                        getMutationType(),
                        getParentSelectionType(),
                        getSurvivorSelectionType());
                System.out.println("2");
            } catch (Exception e) {
                throw e;
            }

            model = new GeneticAlgorithm(setting, operations);

            ChromosomeEvaluator ev = null;
            try {
//                Class s = Class.forName(evaluatorClass);
//                System.out.println("ss");
                File f = new File(mainPath);
                URL[] cp = {f.toURI().toURL()};
                URLClassLoader urlcl = new URLClassLoader(cp);
                Class clazz = urlcl.loadClass(evaluatorClass);
                ev = (ChromosomeEvaluator) clazz.newInstance();
            } catch (Exception ex) {
                throw new IllegalStateException("Evaluator Class cannot be instantiated");
            }

            if (ev != null) {
                model.optimize(ev);
                System.out.println(model.getBestFitness());
                System.out.println(model.getBestIndv());
            }
        }

        private void runFile(String command) throws Exception {
            Process pro = Runtime.getRuntime().exec(command);
            printLines(command + " stdout:", pro.getInputStream());
            printLines(command + " stderr:", pro.getErrorStream());
            pro.waitFor();
            System.out.println(command + " exitValue() " + pro.exitValue());
        }

        private void compileEvaluator() {
            try {
                runFile("javac -cp " + libPath + " " + evaluatorPath + " -d \""
                        + mainPath + "\""
                );
            } catch (Exception ex) {
                throw new IllegalStateException("Evaluator Class cannot be compiled");
            }
        }

        private void printLines(String name, InputStream ins) throws Exception {
            String line = null;
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(ins));
            while ((line = in.readLine()) != null) {
                System.out.println(name + " " + line);
            }
        }

        private void binarySelected() {
            String[] model = {"Singe Point", "n Point", "Uniform"};
            setCrossOverType(model);

            model = new String[]{"Binary"};
            setMutationType(model);

        }

        private void integerSelected() {
            String[] model = {"Singe Point", "n Point", "Uniform"};
            setCrossOverType(model);

            model = new String[]{"Turn Over", "Random", "Creep"};
            setMutationType(model);

        }

        private void realSelected() {
            String[] model = {"Singe Point", "n Point", "Uniform",
                "Single Arithmetic", "Simple ArithMetic", " Whole ArithMetic"
            };
            setCrossOverType(model);

            model = new String[]{"Uniform", "Gaussian"};
            setMutationType(model);
        }

        private void permutationSelected() {
            String[] model = {
                "Order", "Partially Mapped", "Cycle", "Edge"
            };
            setCrossOverType(model);

            model = new String[]{"Swap", "Insert", "Scramble", "Inversion", "nScramble"};
            setMutationType(model);
        }

    }

    public void setCrossOverType(String[] model) {
        crossoverType.setModel(new DefaultComboBoxModel(model));
    }

    public void setMutationType(String[] model) {
        mutationType.setModel(new DefaultComboBoxModel(model));
    }

}
